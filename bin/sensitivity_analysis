#!/usr/bin/python
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Analyze the sensitivity of a set of encodings to their variable parameters.
#
import argparse
import sys

import encoder
import mpeg_settings
import optimizer
import pick_codec

def AnalyzeVariants(encoding, score=False):
  # pylint: disable=too-many-branches
  context = encoding.encoder.context
  codec = context.codec
  for option in codec.option_set.AllChangeableOptions():
    # Get sensitivity on integer-valued options.
    param_here = encoding.encoder.parameters
    try:
      # Probe that it's an integer and that min and max exist.
      _ = option.min
      _ = option.max
      value = int(encoding.encoder.parameters.GetValue(option.name))
    except ValueError:
      # This will happen if the value can't be parsed as an int.
      continue
    except AttributeError:
      continue
    except encoder.Error:
      # This will happen for "no value for this option".
      continue
    # Hackish!
    if value > option.min:
      param_low = param_here.ChangeValue(option.name, str(value-1))
      encoding_low = encoder.Encoding(encoder.Encoder(context, param_low),
                                      encoding.bitrate, encoding.videofile)
      encoding_low.Recover()
      if score and not encoding_low.Result():
        encoding_low.Execute()
        encoding_low.Store()
      if encoding_low.Result():
        print option.name, value, '-1',
        print encoding_low.result['bitrate'] - encoding.result['bitrate'],
        print encoding_low.result['psnr'] - encoding.result['psnr']
      else:
        print option.name, value, '-1: No result'
    else:
      print option.name, value, 'at lower limit'

    if value < option.max:
      param_high = param_here.ChangeValue(option.name, str(value+1))
      encoding_high = encoder.Encoding(encoder.Encoder(context, param_high),
                                      encoding.bitrate, encoding.videofile)
      encoding_high.Recover()
      if score and not encoding_high.Result():
        encoding_high.Execute()
        encoding_high.Store()
      if encoding_high.Result():
        print option.name, value, '+1',
        print -encoding_high.result['bitrate'] + encoding.result['bitrate'],
        print -encoding_high.result['psnr'] + encoding.result['psnr']
      else:
        print option.name, value, '+1 No result'
    else:
      print option.name, value, 'at upper limit'

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--codec')
  parser.add_argument('--score', action='store_true', default=False)
  args = parser.parse_args()

  codec = pick_codec.PickCodec(args.codec)
  my_optimizer = optimizer.Optimizer(codec)
  for rate, filename in mpeg_settings.MpegFiles().AllFilesAndRates():
    videofile = encoder.Videofile(filename)
    encoding = my_optimizer.BestEncoding(rate, videofile)
    print rate, filename, my_optimizer.Score(encoding)
    AnalyzeVariants(encoding, args.score)
  return 0

if __name__ == '__main__':
  sys.exit(main())
