#!/usr/bin/python
# Copyright 2015 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This script exports some improved results (under parameter control).
#
import argparse
import sys

import encoder
import optimizer
import pick_codec
import score_tools


def ImprovementsInOneParameterSet(my_optimizer, filename):
  my_encoder = encoder.Encoder(my_optimizer.context, filename=filename)
  cache = my_optimizer.context.cache
  results = []
  for encoding in cache.AllScoredEncodingsForEncoder(my_encoder):
    new_score = my_optimizer.Score(encoding)
    try:
      old_score = my_optimizer.Score(encoding, scoredir='score_storage')
      if new_score > old_score:
        results.append(encoding)
    except (encoder.Error, KeyError):
      # Error cases where old score is not computable. Use new score.
      if new_score > 0.0:
        results.append(encoding)
  return results


def FindImprovedScores(codecs, criterion):
  improvement_list = []
  for codec_name in codecs:
    # This code only works with EncodingDiskCache, not EncodingMemoryCache,
    # but pylint picks up EncodingMemoryCache as the likely cache type.
    # pylint: disable=maybe-no-member
    codec = pick_codec.PickCodec(codec_name)
    my_optimizer = optimizer.Optimizer(codec,
        score_function=score_tools.PickScorer(criterion))
    filenames = my_optimizer.context.cache.AllEncoderFilenames()
    for filename in filenames:
      improvement_list.extend(ImprovementsInOneParameterSet(my_optimizer,
                                                            filename))
  return improvement_list


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--remove', action='store_true', default=False)
  parser.add_argument('--criterion', default='psnr')
  parser.add_argument('codecs', nargs='*',
                      default=pick_codec.AllCodecNames())
  args = parser.parse_args()
  improved_scores = FindImprovedScores(args.codecs, args.criterion)
  print 'Number of improvements: %d' % len(improved_scores)
  # TODO: actually export the improved scores.
  for encoding in improved_scores:
    encoding.context.cache.StoreEncoder(encoding.encoder,
                                        workdir='score_storage')
    encoding.context.cache.StoreEncoding(encoding, workdir='score_storage')
  return 0

if __name__ == '__main__':
  sys.exit(main())
