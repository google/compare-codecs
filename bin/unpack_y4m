#!/usr/bin/python
#
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
Usage: unpack-y4m filename.y4m

Unpacks an Y4M file into an .yuv file with a filename of the form
that is expected by other scripts in this toolbox."""

import argparse
import os
import sys
import y4m

class Error(Exception):
  pass

# Global variables to work around lack of closures with r/w variables in Python
yuvWriter = None  # pylint: disable=invalid-name
args = None # pylint: disable=invalid-name

def data_callback(frame):
  global yuvWriter  # pylint: disable=global-statement, invalid-name
  if not yuvWriter:
    if frame.headers['C'] != '420jpeg':
      raise Error('Bad format %s' % frame.headers['C'])
    outfile_name = '%s_%dx%d_%s.yuv' % (
        os.path.splitext(args.filename)[0],
        frame.headers['W'],
        frame.headers['H'],
        round(float(frame.headers['F'][0]) /
              frame.headers['F'][1]))
    print 'Writing to %s' % outfile_name
    yuvWriter = open(outfile_name, 'w')
  yuvWriter.write(frame.buffer)

def main():
  global args  # pylint: disable=global-statement, invalid-name

  parser = argparse.ArgumentParser()
  parser.add_argument('filename')
  args = parser.parse_args()

  with open(args.filename) as y4mfile:
    reader = y4m.Reader(data_callback)
    while True:
      data = y4mfile.read(1024)
      if not data:
        break
      reader.decode(data)

if __name__ == '__main__':
  sys.exit(main())

