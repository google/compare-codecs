#!/usr/bin/python
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This script verifies that stored parameters for all encoders are correct.
#
# The encoder is stored in a directory that is named by a hash over
# its string representation. If the string representation changes,
# the hash will change, and therefore the old directory becomes invalid.
#
# Also, the legal parameters for a codec may change. This will result in
# an error when trying to retrieve the parameter set.
#
# The script has an option to delete offending encoders.
#
import argparse
import sys

import encoder
import pick_codec

def IssuesOnOneParameterSet(context, filename):
  something_changed = False
  try:
    my_encoder = encoder.Encoder(context, filename=filename)
    new_parameters = context.codec.ConfigurationFixups(my_encoder.parameters)
    if new_parameters != my_encoder.parameters:
      print 'Error: Parameters change at fixup for codec %s encoder %s' % (
          context.codec.name, filename)
      print 'Old:', my_encoder.parameters.ToString()
      print ('New: %s'
             % new_parameters.ToString())
      something_changed = True
  except (encoder.ParseError) as error:
    print 'Parse error in codec %s encoder %s: %s' % (
        context.codec.name, filename, error)
    something_changed = True
  except (encoder.Error, IOError) as error:
    # encoder.Error is raised if there's a checksum change.
    # IOError is raised if the encoder directory is corrupted,
    # for instance if the parameter file is missing.
    print 'Error in codec %s encoder %s: %s' % (
        context.codec.name, filename, error)
    something_changed = True
  return something_changed

def VerifyHashnames(codecs, remove_offending_encoders):
  change_count = 0
  for codec_name in codecs:
    # This code only works with EncodingDiskCache, not EncodingMemoryCache,
    # but pylint picks up EncodingMemoryCache as the likely cache type.
    # pylint: disable=maybe-no-member
    codec = pick_codec.PickCodec(codec_name)
    context = encoder.Context(codec, cache_class=encoder.EncodingDiskCache)
    filenames = context.cache.AllEncoderFilenames(only_workdir=True)
    for filename in filenames:
      if IssuesOnOneParameterSet(context, filename):
        if remove_offending_encoders:
          print 'Deleting encoder %s' % filename
          context.cache.RemoveEncoder(filename)
        change_count += 1
  return change_count

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--remove', action='store_true', default=False)
  parser.add_argument('codecs', nargs='*',
                      default=pick_codec.AllCodecNames())
  args = parser.parse_args()
  change_count = VerifyHashnames(args.codecs, args.remove)
  print 'Number of issues: %d' % change_count
  if change_count > 0 and not args.remove:
    return 1
  return 0

if __name__ == '__main__':
  sys.exit(main())
