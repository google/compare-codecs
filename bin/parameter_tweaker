#!/usr/bin/python
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tweaker for the VP8 codec.

Usage: vp8tweaker [--loop] <rate> <videofile>

This script consults the run database for the VP8 codec,
picks the best encoding so far, generates the tweak set for it,
finds the encoding with the highest likely score that hasn't been
encoded, executes the encoding, and reports whether or not there
was improvement.
"""

import argparse
import sys

import encoder
import optimizer
import pick_codec
import score_tools

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('rate')
  parser.add_argument('videofile')
  parser.add_argument("--loop", action="store_true", dest="loop")
  parser.add_argument("--until_score", type=float)
  parser.add_argument("--codec")
  parser.add_argument('--criterion', default='psnr')
  args = parser.parse_args()

  print "Loop is", args.loop
  print "Until score is", args.until_score

  videofile = encoder.Videofile(args.videofile)

  bitrate = int(args.rate)
  args = parser.parse_args()

  print "Loop is", args.loop
  print "Codec is", args.codec

  videofile = encoder.Videofile(args.videofile)

  codec = pick_codec.PickCodec(args.codec)
  my_optimizer = optimizer.Optimizer(codec,
      score_function=score_tools.PickScorer(args.criterion))

  while True:
    bestsofar = my_optimizer.BestEncoding(bitrate, videofile)
    bestsofar.Recover()
    if bestsofar.Result():
      current_score = my_optimizer.Score(bestsofar)
      if args.until_score and current_score > args.until_score:
        print "Happy with the score achieved"
        return 0
      print "Starting from %s score %s" % (bestsofar.encoder.Hashname(),
                                           current_score)
      next_encoding = my_optimizer.BestUntriedEncoding(bitrate, videofile)
      if not next_encoding:
        print "Ran out of variants to try"
        return 1
    else:
      print "Starting from unscored encoding %s" % bestsofar.encoder.Hashname()
      next_encoding = bestsofar
    print "Trying encoder", next_encoding.encoder.Hashname()
    next_encoding.Execute()
    print "Score is", my_optimizer.Score(next_encoding)
    next_encoding.Store()
    if not args.loop:
      return 0

if __name__ == '__main__':
  sys.exit(main())

