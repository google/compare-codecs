#!/usr/bin/python
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Pick a random codec, find a random video file and bitrate, and randomly
# try another encoding for it.
# This is intended to be run as a CPU waster in the background.
#

import argparse
import collections
import encoder
import pick_codec
import random
import mpeg_settings
import optimizer
import score_tools
import sys

def TryToImprove(my_optimizer, filename, bitrate, dry_run):
  """Try to improve an encoding. Return true if improved."""
  videofile = encoder.Videofile(filename)
  bestsofar = my_optimizer.BestEncoding(bitrate, videofile)
  if bestsofar.Result():
    previous_score = my_optimizer.Score(bestsofar)
  else:
    previous_score = -10000
  next_encoding = my_optimizer.BestUntriedEncoding(bitrate, videofile)
  if next_encoding:
    if dry_run:
      print next_encoding.EncodeCommandLine()
      return 'Dry run'
    print "Trying encoder", next_encoding.encoder.Hashname()
    next_encoding.Execute()
    print "Score is", my_optimizer.Score(next_encoding), ' from', previous_score
    next_encoding.Store()
    if my_optimizer.Score(next_encoding) > previous_score:
      return 'Improved'
    else:
      return 'Not improved'
  return 'No try'

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--iterations', type=int, default=sys.maxint)
  parser.add_argument('--criterion', default='psnr')
  parser.add_argument('--codecs', nargs='*', default=pick_codec.AllCodecNames())
  parser.add_argument('--dry-run', action='store_true', default=False)
  args = parser.parse_args()
  print 'Codecs are ', args.codecs
  tries = 0
  results = collections.Counter()
  while tries < args.iterations:
    tries += 1
    codec = pick_codec.PickCodec(random.choice(args.codecs))
    my_optimizer = optimizer.Optimizer(codec,
        score_function=score_tools.PickScorer(args.criterion),
        file_set=mpeg_settings.MpegFiles())
    (bitrate, filename) = random.choice(
        mpeg_settings.MpegFiles().AllFilesAndRates())

    print "Trying codec %s on file %s rate %s" % (codec.name, filename,
                                                  bitrate)
    result = TryToImprove(my_optimizer, filename, bitrate, dry_run=args.dry_run)
    results[result] += 1
    print 'So far:', dict(results)


if __name__ == '__main__':
  sys.exit(main())
