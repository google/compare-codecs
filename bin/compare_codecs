#!/usr/bin/python
#
# Copyright 2014 Google.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Compares a number of codecs for what they do when presented with the
# "MPEG" test suite.
#
# Outputs a table with the samples down and the codecs across, giving
# bitrate and PSNR for each target.
#
import argparse
import sys

import mpeg_settings
import encoder
import optimizer
import pick_codec
import score_tools

def ListOneTarget(codecs, scorer_function, rate, videofile, do_score):
  print '%-28.28s %5d' % (videofile.basename, rate),
  for codec_name in codecs:
    codec = pick_codec.PickCodec(codec_name)
    my_optimizer = optimizer.Optimizer(codec, score_function=scorer_function)
    bestsofar = my_optimizer.BestEncoding(rate, videofile)
    if do_score and not bestsofar.Result():
      bestsofar.Execute()
      bestsofar.Store()
    assert bestsofar.Result()
    print ' %6d %4.1f %4.1f' % (bestsofar.result['bitrate'],
                                bestsofar.result['psnr'],
                                my_optimizer.Score(bestsofar)),
  print ''

def ListResults(codecs, scorer, do_score):
  scorer_function = score_tools.PickScorer(scorer)
  print '%-28s %5s' % ('File', 'Rate'),
  for codec in codecs:
    print '%17s' % pick_codec.ShortName(codec),
  print
  for rate, filename in mpeg_settings.MpegFiles().AllFilesAndRates():
    videofile = encoder.Videofile(filename)
    ListOneTarget(codecs, scorer_function, rate, videofile, do_score)

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--score', action='store_true', default=False)
  parser.add_argument('--criterion', default='psnr')
  parser.add_argument('codecs', nargs='*',
                      default=pick_codec.AllCodecNames())
  args = parser.parse_args()
  ListResults(args.codecs, args.criterion, args.score)
  return 0

if __name__ == '__main__':
  sys.exit(main())
